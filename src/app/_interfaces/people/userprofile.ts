// Generated by https://quicktype.io

import { IPagedList } from "src/app/_services/system/paging.service";

export interface ClientSearchResults {
 results: IUserProfile[];
 paging: IPagedList;
 message : string;
}

export interface ClientSearchModel {
  name: string;
  accountNumber: string;
  dOB: string;
  email: string;
  firstName: string;
  lastName: string;
  phone: string;
  followUpDate: string;
  company: string;
  city: string;
  state: string;
  zip: string;
  pageSize : number;
  pageNumber : number;
  pageCount : number;
  currentPage : number;
  lastPage : number;
  useNameInAllFieldsForSearch: boolean;
  id: number;
  clientTypeID: number;

}

export interface IUserProfile {
  id:                        number;
  firstName:                 string;
  lastName:                  string;
  phone:                     string;
  zip:                       string;
  state:                     string;
  city:                      string;
  address:                   string;
  email:                     string;
  notes:                     string;
  loyaltyPoints:             number;
  loyaltyPurchaseCount:      number;
  clientUUID:                string;
  uid:                       string;
  clientTypeID:              number;
  totalPurchases:            number;
  initialDate:               string;
  lastAccessedDate:          string;
  company:                   string;
  accountNumber:             string;
  userName:                  string;
  cellPhone:                 string;
  apiPassword:               string;
  roles:                     string;
  onlineDescription:         string;
  onlineDescriptionImage:    string;
  onlineDescriptionTag:      string;
  dob:                       string;
  gender:                    number;
  followUpdateDate:          string;
  salesRepName:              string;
  statusname:                string;
  lasModifiedDate:           string;
  employeeID:                number;
  loyaltyPointValue:         number;
  careGiverCode:             string;
  contact:                   string;
  taxSales:                  number;
  priceColumn:               number;
  defaultPercentageDiscount: number;
  clientType:                clientType;
  employee:                  employee;
  openOrderCount:            number;
  itemCount     :            number;
  age           :            number;
  metrcKey      :            string;
  metrcUser     :            string;
  dlNumber      :            string;
  dlLicenseEXP  :            string;
  accountDisabled       :    boolean;
  accountLocked :            boolean;
  medTempLicense:            string;
  medPhysicianApproved :     boolean;
  medLicenseNumber:          string;
  medPlantLimit:             number;
  medGramLimit:              number;
  medPrescriptionExpiration :string;
  medConcentrateLimit     :  string;
  patientRecOption        : boolean;
  errorMessage: string;
  message: string;
}

export interface clientType {
  id:                number;
  name:              string;
  pointValue:        string;
  dailyCredit:       number;
  limitGram :        number;
  limitSeeds:        number;
  limitPlants:       number;
  limitLiquid:       number;
  limitSolid:        number;
  limitConcentrate:  number;
  limitExtract:      number;
  limitConcentrates: number;
  limitCombinedCategory:number;
  allowStaffUse:    boolean;
  authorizationGroupID:  number;
  jsonObject       : string;
}

export interface employee {
  id:                        number;
  firstName:                 string;
  lastName:                  string;
  address:                   string;
  city:                      string;
  state:                     string;
  zip:                       string;
  phone:                     string;
  cell:                      string;
  email:                     string;
  emergencyContact:          string;
  emergencyPhone:            string;
  positionID:                number;
  dob:                       string;
  courtesyTitle:             string;
  notes:                     string;
  reportsTo:                 number;
  logonOnCheck1:             boolean;
  logonCheck2:               boolean;
  logonCheck3:               boolean;
  password:                  string;
  socialSecurity:            string;
  payRate:                   number;
  numberofHoursPrefered:     number;
  active:                    boolean;
  hireDate:                  string;
  registerLock:              string;
  withHolding:               string;
  employeeTier:              number;
  employeeDiscountRate:      number;
  employeeCard:              string;
  title:                     string;
  prefix:                    string;
  driverOut:                 boolean;
  driverOrder:               number;
  termTemp:                  string;
  activePosition:            number;
  onClock:                   number;
  terminationDate:           string;
  upsize_ts:                 string;
  driverFee:                 number;
  commissionRate:            number;
  logonPassword:             string;
  securityLevel:             number;
  siteID:                    number;
  regionMajorID:             number;
  regionMinorID:             number;
  regionSuperiorID:          number;
  commissionDollarLevel:     number;
  commissionPercentageLevel: number;
  commissionGroupID:         number;
  apiPassword:               string;
  activeJob:                   jobTypes;
  metrcLicenseNumber:        string;
  metrcStatus:               string;
  metrcType:                 string;
  metrcGranted:              string;
  metrcExpires:              string;
  metrcHired:                string;
  metrcMGR:                  boolean;
  metrcLastLogin:            string;
  stateIDNumber:             string;
  stateIDExpiration:         string;
  clientID        :          number;
  jobTypeID       :          number;
  employeeJobs:              employeeJobs;
}

export interface employeeJobs {
  employeeID : number;
  position: number;
  hours: number;
  payRate: number;
  id: number;
}

export interface jobTypes {
  id:            number;
  name:          string;
  payRate:       number;
  shortDesc:     string;
  positionOrder: number;
  revenueCenter: number;
}

export interface FlowVendor {
  name	:     string;
  organization	:     string;
  licenses	:     string;
  streetAddress1	:     string;
  streetAddress2	:     string;
  city  :     string;
  state	:     string;
  zip	:     string;
  email	:     string;
  phone	:     string;
  repName	:     string;
  repLicense:     string;
  repPhone	:     string;
  repEmail	:     string;
  nutrients	:     string;
  veriticallyIntegrated	:   boolean;
}

export interface ImportFlowVendorResults {
  listAdded: FlowVendor[];
  listNotAdded: FlowVendor[];
}


export interface Last30DaysSales {
  clientID: number;
  gramTotal: number;
  medLicenseNumber: string;
  oompb: string;
  thirtyDayProgress: number;
  gramRatio: number;
}
