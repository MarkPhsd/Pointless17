// Generated by https://quicktype.io

import { IBalanceSheet } from "src/app/_services/transactions/balance-sheet.service";

export interface ICanCloseOrder {
  openPrintedOrders: TransferOrder[];
  openPaidOrders:    TransferOrder[];
  openBalanceSheets :IBalanceSheet[];
  allowClose:        boolean;
}

export interface TransferOrder {
  id:                    number;
  orderTime:             string;
  orderDate:             string;
  shipTime:              string;
  shipDate:              string;
  completionDate:        string;
  completionTime:        string;
  scheduleDate:          string;
  scheduleTime:          string;
  scheduleTo:            string;
  alarmDate:             string;
  eta:                   string;
  arrivalDate:           string;
  timeIn:                string;
  shipOutOrderDate:      string;
  termsDueDate:          string;
  employeeID:            number;
  shift:                 number;
  clientID:              number;
  serviceTypeID:         number;
  deliveryEmployee:      number;
  operationsEmployee:    number;
  purchaseOrderNumber:   string;
  supplierID:            number;
  productOrderMemo:      string;
  fieldRepMemo:          string;
  compName:              string;
  shippingNumber:        string;
  tableNumber:           number;
  activePO:              boolean;
  tableNumberStore:      number;
  zrun:                  string;
  taxInfo:               number;
  voidComp:              number;
  serviceArea:           string;
  registerName:          string;
  discountType:          number;
  discountAmount:        number;
  discountCash:          number;
  discountName:          number;
  orderPrepared:         string;
  quote:                 string;
  seatCount:             number;
  shipName:              string;
  shipAddress:           string;
  shipAddress2:          string;
  shipCity:              string;
  shipPostal:            string;
  shipState:             string;
  shipPostalCode:        string;
  shipSuite:             string;
  shipZip:               string;
  employeeDisc:          number;
  serviceAreaID:         number;
  reportRunID:           number;
  couponAdvertiser:      number;
  displayTotal:          number;
  voidReason:            string;
  registerTransaction:   boolean;
  serviceType:           string;
  positiveNegative:      number;
  serverName:            string;
  destAddress:           string;
  destAddress2:          string;
  destCity:              string;
  destZip:               string;
  destState:             string;
  mileage:               number;
  driveTime:             number;
  orderPhone:            string;
  sortOrder:             number;
  vehicle:               string;
  driverID:              number;
  scheduleManagementID:  number;
  statusID:              number;
  progress:              string;
  letterID:              number;
  regionMinorID:         number;
  regionMajorID:         number;
  regionSuperiorID:      number;
  siteID:                number;
  eventSubject:          string;
  insuranceGrp:          string;
  insurancePhone:        string;
  insuranceID:           number;
  statusName:            string;
  taxTotal:              number;
  gstTaxTotal:           number;
  managerID:             number;
  costTotal:             number;
  shipVia:               number;
  resolutionDescription: string;
  location:              string;
  crvTotal:              number;
  productOrderREf:       number;
  couponUsed:            number;
  orderlocked:           string;
  taxTotal2:             number;
  taxTotal3:             number;
  qbImport:              number;
  checkInRepName:        string;
  checkinRepID:          number;
  onlineOrderID:         string;
  clientTypeID:          number;
  routeDetailID:         number;
  routeID:               number;
  beginDate:             string;
  endDate:               string;
  items:                 TransferItem[];
  payments:              TransferPayment[];
}

export interface TransferItem {
  id:                            number;
  productID:                     number;
  quantity:                      number;
  discount:                      number;
  unitPrice:                     number;
  wholeSale:                     number;
  orderID:                       number;
  unitType:                      number;
  modifierNote:                  string;
  splitter:                      number;
  printed:                       string;
  lineTotal:                     number;
  poDetaildIDRef:                number;
  voidComp:                      number;
  quantityView:                  string;
  printCheck:                    number;
  specialID:                     number;
  serial:                        number;
  sellByDate:                    string;
  arrivalDate:                   string;
  serialCode:                    string;
  holdItem:                      string;
  seatNumber:                    number;
  voidReason:                    string;
  pizzaGroup:                    number;
  pizzaMultiplier:               number;
  mealCourse:                    number;
  dt:                            string;
  mfgProductNumber:              string;
  taxgst:                        number;
  printLocation:                 number;
  gcid:                          string;
  loyaltyGroup:                  number;
  freeItem:                      boolean;
  serviceTypeID:                 number;
  employeeID:                    number;
  zrun:                          string;
  clientID:                      number;
  reportRunID:                   number;
  completionDate:                string;
  orderDate:                     string;
  barTax:                        number;
  productName:                   string;
  unitName:                      string;
  prodModifierType:              number;
  priceTier:                     number;
  priceTierID:                   number;
  requiresMods:                  boolean;
  originalPrice:                 number;
  serverName:                    string;
  positiveNegative:              number;
  registerTransaction:           boolean;
  serviceType:                   string;
  requiredGroupID:               number;
  paymentID:                     number;
  siteID:                        number;
  managerID:                     number;
  productSortOrder:              number;
  medicareAllowable:             number;
  kcode:                         string;
  splitIncidence:                number;
  skuPrimary:                    string;
  skuSecondary:                  string;
  itemReturn:                    number;
  productTypeOption:             number;
  partProcessed:                 number;
  consignmentReturned:           string;
  qtyReceived:                   number;
  crv:                           number;
  lotBatchBarcode:               string;
  rounds:                        number;
  wicEbt_PaidMethod:             number;
  wicebt:                        number;
  taxTotal2:                     number;
  taxTotal3:                     number;
  caseQTY:                       number;
  itemReturned:                  number;
  isWeightedItem:                number;
  stdRetail:                     number;
  tierPrice:                     number;
  traceProductCount:             number;
  batchCount:                    number;
  batchDate:                     string;
  gramCount:                     number;
  seedCount:                     number;
  plantCount:                    number;
  liquidCount:                   number;
  solidCount:                    number;
  concentrateCount:              number;
  extractCount:                  number;
  testingDate:                   string;
  cbd:                           string;
  thc:                           string;
  inventoryCountUsage:           number;
  groupID:                       number;
  itemLoyaltyPointDiscount:      number;
  itemPercentageDiscountValue:   number;
  itemCashDiscount:              number;
  itemOrderPercentageDiscount:   number;
  itemLoyaltyPointDiscountID:    number;
  itemPercentageDiscountValueID: number;
  itemCashDiscountID:            number;
  itemOrderCashDiscountID:       number;
  itemOrderPercentageDiscountID: number;
  itemLoyaltyPointCount:         number;
  metrcResponse:                 string;
  metrcDate:                     string;
  itemOrderCashDiscount_temp:    number;
  itemOrderCashDiscount:         number;
  beginDate:                     string;
  endDate:                       string;
  serialAssignmentID:            number;
  inventoryAssignmentID:         number;
  itemOrderPercentDiscount:      number;
  promptGroupID:                 number;
}

export interface TransferPayment {
  id:                  number;
  orderID:             number;
  tenderType:          number;
  amountPaid:          number;
  checkNumber:         number;
  saleType:            number;
  groupNumber:         number;
  approvalCode:        string;
  preAuth:             string;
  isBatched:           boolean;
  cardHolder:          string;
  getResult:           number;
  getRefNumber:        number;
  getTroutID:          number;
  userID:              string;
  cardNum:             string;
  refNumber:           string;
  ccNumber:            string;
  amountReceived:      number;
  tipAmount:           number;
  exp:                 string;
  clientID:            number;
  groupID:             number;
  groupDate:           string;
  orderDate:           string;
  serviceTypeID:       number;
  employeeID:          number;
  zrun:                string;
  completionDate:      string;
  reportRunID:         number;
  registerTransaction: boolean;
  positiveNegative:    number;
  serviceType:         string;
  serverName:          string;
  cAddress:            string;
  cAddress2:           string;
  cCity:               string;
  cState:              string;
  cZip:                string;
  invoicedDate:        string;
  driverID:            number;
  vehicle:             string;
  origin:              string;
  destination:         string;
  accountNum:          string;
  clientName:          string;
  cvc:                 string;
  managerID:           number;
  batchDate:           string;
  discountGiven:       number;
  siteID:              number;
  giftCardID:          number;
  dlNumber:            string;
  gcBalance:           number;
  processData:         string;
  voidReason:          string;
  voidAmount:          number;
  applicationLabel:    string;
  aid:                 string;
  tvr:                 string;
  iad:                 string;
  tsi:                 string;
  arc:                 string;
  emvTime:             string;
  emvDate:             string;
  emvcvm:              string;
  entryMethod:         string;
  trancode:            string;
  textResponse:        string;
  captureStatus:       string;
  tranType:            string;
  beginDate:           string;
  endDate:             string;
}
