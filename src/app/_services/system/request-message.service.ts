import { Injectable } from '@angular/core';
import { MatSnackBar } from '@angular/material/snack-bar';
import { ISite } from 'src/app/_interfaces';
import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { UserAuthorizationService } from './user-authorization.service';

// Generated by https://quicktype.io

export interface IRequestMessageSearchModel {
  completionDate_From:         string;
  completionDate_To:           string;
  completed:                   boolean;
  pageSize:                    number;
  pageNumber:                  number;
  pageCount:                   number;
  currentPage:                 number;
  lastPage:                    number;
  useNameInAllFieldsForSearch: boolean;
  userID:                      number;
}



export interface IMessageServiceResponse {
  id     : number;
  message: string;
  result : boolean;
}

export interface IMessageService {
  id	            : number;
	message         : string
	method          : string
	roles           : string;
	requestDate     : string;
	requestCompleted: string;
  payload         : string;
  userRequested   : string;
  userID          : number;
}

@Injectable({
  providedIn: 'root'
})
export class RequestMessageService {

  isAuthorized   = false;
  constructor(private snackBar: MatSnackBar,
              private http: HttpClient,
              private userAuthorization: UserAuthorizationService,
              ) {

    this.isAuthorized = this.userAuthorization.isUserAuthorized('admin, manager')
  }

  performMessageAction(site: ISite, id: number): Observable<IMessageServiceResponse> {
    //this shouold perform the operation on the backend via the api.

    const controller = "/RequestMessages/"

    const endPoint = "performAction"

    const parameters = ``

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return  this.http.get<IMessageServiceResponse>(url)

  }

  getRequestMessagesByCurrentUser(site: ISite, searchModel: IRequestMessageSearchModel): Observable<IMessageServiceResponse> {
    //this shouold perform the operation on the backend via the api.

    const controller = "/RequestMessages/"

    const endPoint = "getRequestMessagesByCurrentUser"

    const parameters = ``

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return  this.http.post<IMessageServiceResponse>(url,searchModel)

  }


  getOpenRequestMessages(site: ISite, searchModel: IRequestMessageSearchModel): Observable<IMessageServiceResponse> {
    //this shouold perform the operation on the backend via the api.

    const controller = "/RequestMessages/"

    const endPoint = "getOpenRequestMessages"

    const parameters = ``

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return  this.http.post<IMessageServiceResponse>(url,searchModel)

  }


  cancelRequest(site: ISite, id: number): Observable<IMessageServiceResponse> {
    //this shouold perform the operation on the backend via the api.

    const controller = "/RequestMessages/"

    const endPoint = "cancelRequest"

    const parameters = ``

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return  this.http.get<IMessageServiceResponse>(url)

  }


  getRequestMessage(site: ISite, id: number): Observable<IMessageServiceResponse> {
    //this shouold perform the operation on the backend via the api.

    const controller = "/RequestMessages/"

    const endPoint = "getRequestMessage"

    const parameters = ``

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return  this.http.get<IMessageServiceResponse>(url)

  }


  notificationEvent(description, title){
    this.snackBar.open ( description, title , {
      duration: 2000,
      verticalPosition: 'top'
    })
  }

}
