import { Injectable } from '@angular/core';
import { MatSnackBar } from '@angular/material/snack-bar';
import { ISite } from 'src/app/_interfaces';
import { Observable, of } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { UserAuthorizationService } from './user-authorization.service';
import { type } from 'os';

// Generated by https://quicktype.io

export interface IRequestMessageSearchModel {
  completionDate_From:         string;
  completionDate_To:           string;
  completed:                   boolean;
  pageSize:                    number;
  pageNumber:                  number;
  pageCount:                   number;
  currentPage:                 number;
  lastPage:                    number;
  useNameInAllFieldsForSearch: boolean;
  userID:                      number;
}



export interface IRequestResponse {
  id     : number;
  message: string;
  result : boolean;
}

export interface IRequestMessage {
  id	            : number;
  parameters      : string;
	method          : string;
  type            : string;
  subject         : string;
	roles           : string;
	requestDate     : string;
	requestCompleted: string;
  payload         : string;
  userRequested   : string;
  userID          : number;
  senderName      : string;
  senderID        : number;
  archived        : boolean;
  message         : string;
  employeeID      : number;
}

@Injectable({
  providedIn: 'root'
})
export class RequestMessageService {

  isAuthorized   = false;
  constructor(private snackBar: MatSnackBar,
              private http: HttpClient,
              private userAuthorization: UserAuthorizationService,
              ) {

    this.isAuthorized = this.userAuthorization.isUserAuthorized('admin,manager')
  }

  performMessageAction(site: ISite, id: number): Observable<IRequestResponse> {
    //this shouold perform the operation on the backend via the api.

    const controller = "/RequestMessages/"

    const endPoint = "performAction"

    const parameters = ``

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return  this.http.get<IRequestResponse>(url)

  }

  saveMessage(site: ISite,  message: IRequestMessage): Observable<IRequestResponse> {
    //this shouold perform the operation on the backend via the api.

    if (message.id) {
      return  this.putMessage(site, message)
    }
    return this.postMessage(site, message)

  }

  postMessage(site: ISite, message: IRequestMessage) : Observable<IRequestResponse> {
    const controller = "/RequestMessages/"

    const endPoint = "PostRequestMessage"

    const parameters = ``

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return  this.http.post<IRequestResponse>(url, message);

  }

  putMessage(site: ISite, message: IRequestMessage) : Observable<IRequestResponse> {

    const controller = "/RequestMessages/"

    const endPoint = "PutRequestMessage"

    const parameters = `?id=${message.id}`

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return  this.http.put<IRequestResponse>(url, message);

  }

  getRequestMessagesByCurrentUser(site: ISite, searchModel: IRequestMessageSearchModel): Observable<IRequestMessage[]> {
    //this shouold perform the operation on the backend via the api.

    if (!this.userAuthorization.user) { return of(null)}

    const controller = "/RequestMessages/"

    const endPoint = "getRequestMessagesByCurrentUser"

    const parameters = ``

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return  this.http.post<IRequestMessage[]>(url, searchModel)

  }


  getOpenRequestMessages(site: ISite, searchModel: IRequestMessageSearchModel): Observable<IRequestMessage[]> {
    //this shouold perform the operation on the backend via the api.
    if (!this.userAuthorization.user) { return of(null)}
    const controller = "/RequestMessages/"

    const endPoint = "getOpenRequestMessages"

    const parameters = ``

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return  this.http.post<IRequestMessage[]>(url,searchModel)

  }

  cancelRequest(site: ISite, id: number): Observable<IRequestResponse> {
    //this shouold perform the operation on the backend via the api.

    const controller = "/RequestMessages/"

    const endPoint = "cancelRequest"

    const parameters = ``

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return  this.http.get<IRequestResponse>(url)

  }

  getRequestMessage(site: ISite, id: number): Observable<IRequestMessage[]> {
    //this shouold perform the operation on the backend via the api.
    if (!this.userAuthorization.user) { return of(null)}

    const controller = "/RequestMessages/"

    const endPoint = "getRequestMessage"

    const parameters = ``

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return  this.http.get<IRequestMessage[]>(url)

  }


  notificationEvent(description, title){
    this.snackBar.open ( description, title , {
      duration: 2000,
      verticalPosition: 'top'
    })
  }

}
