import { Injectable } from '@angular/core';
import { HttpClient,  } from '@angular/common/http';
import { BehaviorSubject, Observable, } from 'rxjs';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Capacitor } from '@capacitor/core';
import { ISite } from 'src/app/_interfaces';
import { FormBuilder, FormGroup } from '@angular/forms';

export interface IBalanceSheetPagedResults {
  results:      BalanceSheetOptimized[];
  paging:       Paging;
  summary:      Summary;
  errorMessage: string;
}

export interface Paging {
  hasNextPage:      boolean;
  hasPreviousPage:  boolean;
  lastItemOnPage:   number;
  pageSize:         number;
  currentPage:      number;
  pageCount:        number;
  recordCount:      number;
  isLastPage:       boolean;
  isFirstPage:      boolean;
  totalRecordCount: number;
}

export interface BalanceSheetOptimized {
  id:                number;
  type:              number;
  dateTime:          string;
  noSales:           number;
  startTime:         string;
  deviceName:        string;
  employeeID:        number;
  salesTotal:        number;
  overUnderTotal:    number;
  registerPosVoids:  number;
  registerNegVoids:  number;
  startedWith:       number;
  endedWith:         number;
  endTime:           string;
  cashIn:            number;
  creditIn:          number;
  cashDropCheck:     number;
  reportRunMasterID: number;
  creditTips:        number;
  paidOuts:          number;
  mileage:           number;
  storeID:           string;
  cashDeposit:       number;
  checkDeposit:      number;
  otherDeposit:      number;
  depositer:         string;
  cashDropAmount:    number;
  reportName:        string;
  balanceSheetEmployee  : BalanceSheetEmployee;
}

// Generated by https://quicktype.io

export interface IBalanceSheet {
  id:                   number;
  type:                 number;
  dateTime:             string;
  noSales:              number;
  startTime:            string;
  deviceName:           string;
  employeeID:           number;
  salesTotal:           number;
  overUnderTotal:       number;
  registerPosVoids:     number;
  registerNegVoids:     number;
  startedWith:          number;
  endedWith:            number;
  endTime:              string;
  cashIn:               number;
  creditIn:             number;
  cashDropCheck:        number;
  reportRunMasterID:    number;
  onesEnd:              number;
  fivesEnd:             number;
  tensEnd:              number;
  twentiesEnd:          number;
  fiftiesEnd:           number;
  hundredsEnd:          number;
  pennyEnd:             number;
  nickelEnd:            number;
  dimeEnd:              number;
  quarterEnd:           number;
  halfDollarEnd:        number;
  dollarsEnd:           number;
  drawerAB:             number;
  cashTips:             number;
  giftCertificates:     number;
  giftCard:             number;
  checks:               number;
  trvlrCheck:           number;
  creditTips:           number;
  paidOuts:             number;
  mileage:              number;
  storeID:              string;
  cashDeposit:          number;
  checkDeposit:         number;
  otherDeposit:         number;
  depositer:            string;
  c1s:                  number;
  c5s:                  number;
  c10s:                 number;
  c20s:                 string;
  c50s:                 string;
  c100s:                string;
  cashDropAmount:       number;
  reportName:           string;
  dollarsStart:         number;
  fivesStart:           number;
  tensStart:            number;
  twentiesStart:        number;
  fiftiesStart:         number;
  hundredsStart:        number;
  pennyStart:           number;
  dimeStart:            number;
  nickelStart:          number;
  quarterStart:         number;
  halfDollarStart:      number;
  dollarStart:          number;
  shiftStarted:         number;
  twoDollars:           number;
  twoDollarsStart:      number;
  fiveHundreds:         number;
  twoHundreds:          number;
  fiveHundredsStart:    number;
  twoHundredsStart:     number;
  tooniesEnd:           number;
  tooniesStart:         number;
  cashDropTotal:        number;
  balanceSheetEmployee: BalanceSheetEmployee;
  cashDrops            : CashDrop;
}

export interface CashDrop {
  id          : number;
  amount      : number;
  reportRunID : number;
}

export interface BalanceSheetEmployee {
  id:              number;
  firstName:       string;
  lastName:        string;
  phone:           string;
  cell:            string;
  email:           string;
  position:        number;
  dob:             string;
  payRate:         number;
  active:          boolean;
  hireDate:        string;
  activePosition:  number;
  onClock:         number;
  terminationDate: string;
  securityLevel:   number;
  siteID:          number;
  clientID:        number;
}



export interface Summary {
}

// Generated by https://quickt

export interface BalanceSheetSearchModel {
  completionDate_From: string;
  completionDate_To:   string;
  deviceName:          string;
  balanceSheetStatus:  number;
  employeeID:          number;
  suspendedOrder:      number;
  pageSize:            number;
  pageNumber:          number;
  pageCount:           number;
  currentPage:         number;
  lastPage:            number;
  greaterThanZero:     number;
  id:                  number;
  type          :     number;
}

@Injectable({
  providedIn: 'root'
})

export class BalanceSheetService {

  get platForm() {  return Capacitor.getPlatform(); }
  deviceName: string;
  isApp                       = false;

  private _balanceSheet       = new BehaviorSubject<IBalanceSheet>(null);
  public balanceSheet$        = this._balanceSheet.asObservable();

  private _balanceSheetSearchModel       = new BehaviorSubject<BalanceSheetSearchModel>(null);
  public balanceSearchModelSheet$        = this._balanceSheetSearchModel.asObservable();

  updateBalanceSheet(BalanceSheet:  IBalanceSheet) {
    this._balanceSheet.next(BalanceSheet);
  }

  updateBalanceSearchModel(searchModel:  BalanceSheetSearchModel) {
    this._balanceSheetSearchModel.next(searchModel);
  }

  constructor(
    private http: HttpClient,
    private _fb: FormBuilder,
  )
  {
    if ( this.platForm  === "Electron" || this.platForm === "android" || this.platForm === "capacitor")
    { this.isApp = true }
    this.deviceName = localStorage.getItem('devicename')
  }



  getSheetType(sheet: IBalanceSheet) {
    if (sheet && sheet.type) {
      if (sheet.type == 3) {
        return "Cashier"
      }
      if (sheet.type == 4) {
        return "Server"
      }
      if (sheet.type != 4 && sheet.type != 3) {
        return "other"
      }
    }
    return 'other';
  }

  searchBalanceSheets(site: ISite,
                      searchModel: BalanceSheetSearchModel):  Observable<IBalanceSheetPagedResults>  {

    const controller = '/BalanceSheets/'

    const endPoint  = "SearchBalanceSheets"

    const parameters = ``

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return this.http.post<IBalanceSheetPagedResults>(url, searchModel);

  }

  closeAllSheets(site: ISite)  : Observable<IBalanceSheet[]> {

    const controller = '/BalanceSheets/'

    const endPoint  = "closeAllSheets"

    const parameters = ``

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return this.http.get<IBalanceSheet[]>(url);
  }

  getSheet(site: ISite, id: number)  : Observable<IBalanceSheet> {
    const controller = '/BalanceSheets/'

    const endPoint  = "getSheet"

    const parameters = `?id=${id}`

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return this.http.get<IBalanceSheet>(url);
  }

  getCurrentUserBalanceSheet(site: ISite, deviceName: string)  : Observable<IBalanceSheet> {

    if (deviceName === '' || !deviceName ) { deviceName = 'nothing'}

    const controller = '/BalanceSheets/'

    const endPoint  = "GetCurrentBalanceSheet"

    const parameters = `?deviceName=${deviceName}`

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return this.http.get<IBalanceSheet>(url);
  }

  getZRUNBalanceSheet(site: ISite)  : Observable<IBalanceSheet> {

    const controller = '/BalanceSheets/'

    const endPoint  = "getZRUNBalanceSheet"

    const parameters = ``

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return this.http.get<IBalanceSheet>(url);
  }


  getSheetCalculations(site: ISite, balanceSheet: IBalanceSheet)  : Observable<IBalanceSheet> {
    const controller = '/BalanceSheets/'

    const endPoint  = 'GetSheetCalculations'

    const parameters = ``

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return this.http.post<IBalanceSheet>(url, balanceSheet);
  }


  postSheet(site: ISite, balanceSheet: IBalanceSheet)  : Observable<IBalanceSheet> {

    const controller = '/BalanceSheets/'

    const endPoint  = "postSheet"

    const parameters = ``

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return this.http.post<IBalanceSheet>(url, balanceSheet);

  }

  putSheet(site: ISite, balanceSheet: IBalanceSheet)  : Observable<IBalanceSheet> {

    const controller = '/BalanceSheets/'

    const endPoint  = "putSheet"

    const parameters = `?id=${balanceSheet.id}`

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return this.http.put<IBalanceSheet>(url, balanceSheet);

  }

  deleteSheet(site: ISite, id: number)  : Observable<any> {
    const controller = '/BalanceSheets/'

    const endPoint  = "deleteSheet"

    const parameters = `?id=${id}`

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return this.http.delete<any>(url);
  }

  closeShift(site: ISite,  balanceSheet: IBalanceSheet)  : Observable<IBalanceSheet> {
    const controller = '/BalanceSheets/'

    const endPoint  = "closeSheet"

    const parameters = ``

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return this.http.post<IBalanceSheet>(url, balanceSheet);
  }

  initForm(fb: FormGroup) : FormGroup {

    fb = this._fb.group({
      id:                  [''],
      type:                [''],
      dateTime:            [''],
      noSales:             [''],
      startTime:           [''],
      restaurantSectionID: [''],
      deviceName:          [''],
      employeeID:          [''],
      salesTotal:          [''],
      overUnderTotal:      [''],
      registerPosVoids:    [''],
      registerNegVoids:    [''],
      startedWith:         [''],
      endedWith:           [''],
      endTime:             [''],
      cashIn:              [''],
      creditIn:            [''],
      cashDropCheck:       [''],
      reportRunMasterID:   [''],
      onesEnd:             [''],
      fivesEnd:            [''],
      tensEnd:             [''],
      twentiesEnd:         [''],
      fiftiesEnd:          [''],
      hundredsEnd:         [''],
      pennyEnd:            [''],
      nickelEnd:           [''],
      dimeEnd:             [''],
      quarterEnd:          [''],
      halfDollarEnd:       [''],
      dollarEnd:           [''],
      drawerAB:            [''],
      cashTips:            [''],
      giftCertificates:    [''],
      giftCard:            [''],
      checks:              [''],
      trvlrCheck:          [''],
      creditTips:          [''],
      paidOuts:            [''],
      mileage:             [''],
      storeID:             [''],
      cashDeposit:         [''],
      checkDeposit:        [''],
      otherDeposit:        [''],
      depositer:           [''],
      c1s:                 [''],
      c5s:                 [''],
      c10s:                [''],
      c20s:                [''],
      c50s:                [''],
      c100s:               [''],
      cashDropAmount:      [''],
      reportName:          [''],
      dollarsStart:        [''],
      fivesStart:          [''],
      tensStart:           [''],
      twentiesStart:       [''],
      fiftiesStart:        [''],
      hundredsStart:       [''],
      pennyStart:          [''],
      dimeStart:           [''],
      nickelStart:         [''],
      quarterStart:        [''],
      halfDollarStart:     [''],
      dollarStart:         [''],
      shiftStarted:        [''],
      twoDollars:          [''],
      twoDollarsStart:     [''],
      fiveHundreds:        [''],
      twoHundreds:         [''],
      fiveHundredsStart:   [''],
      twoHundredsStart:    [''],
      tooniesEnd:          [''],
      tooniesStart:        [''],
    })

    return fb
  }

}

