import { Injectable, Input } from '@angular/core';
import { HttpClient,  } from '@angular/common/http';
import { AuthenticationService } from '../system/authentication.service';
import { Observable  } from 'rxjs';
import { ISite, TaxRate }  from 'src/app/_interfaces';

// Generated by https://quicktype.io
//move to separate file, TaxRatesGroups is for getting associated groups
export interface TaxRatesGroups {
  id:            number;
  value:         number;
  name:          string;
  useGroupTaxes: UseGroupTaxAssigned[];
}

export interface UseGroupTaxAssigned {
  id:         number;
  useGroupID: number;
  taxID:      number;
  useGroup:   UseGroupAssigned;
}

export interface UseGroupAssigned {
  id:   number;
  name: string;
}

export interface UseGroupTaxAssignedList {
  id:         number;
  useGroupID: number;
  taxID:      number;
}

@Injectable({
  providedIn: 'root'
})
export class TaxesService {

  @Input() currentPage = 1;
  @Input() lastPage    :number;
  @Input() pageCount   :number;
  @Input() pageSize    = 25;
  @Input() pageNumber  = 1;

  constructor( private http: HttpClient,
               private auth: AuthenticationService
              )
    { }

  getTaxRates(site: ISite): Observable<TaxRate[]> {

    const endpoint = "/TaxRates/"

    const parameters = "GetTaxRates"

    const url = `${site.url}${endpoint}${parameters}`

    return  this.http.get<TaxRate[]>(url)

  };


  getTaxRate(site: ISite, id: any): Observable<TaxRate> {

    if (id) {

      const controller = '/TaxRates/'

      const endPoint = 'GetTaxRate'

      const parameters = `?id=${id}`

      const url = `${site.url}${controller}${endPoint}${parameters}`

      return  this.http.get<TaxRate>(url)
    }

  };


  getTaxRateWithGroups(site: ISite, id: any): Observable<TaxRatesGroups> {

    if (id) {

      const controller = '/TaxRates/'

      const endPoint = 'getTaxRateWithGroups'

      const parameters = `?id=${id}`

      const url = `${site.url}${controller}${endPoint}${parameters}`

      return  this.http.get<TaxRatesGroups>(url)
    }

  };

  getTaxRatesWithGroups(site: ISite): Observable<TaxRatesGroups[]> {

    const controller = '/TaxRates/'

    const endPoint = 'getTaxRatesWithGroups'

    const parameters = ``

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return  this.http.get<TaxRatesGroups[]>(url)

  };


  putTax(site: ISite, id: any, taxRate: TaxRate): Observable<TaxRate> {

    if (taxRate) {

      const controller = "/TaxRates/"

      const endPoint = 'PutTaxRate'

      const parameters = `?id=${id}`

      const url = `${site.url}${controller}${endPoint}${parameters}`

      return  this.http.put<TaxRate>(url, taxRate)

    }
  }

    postTaxRate(site: ISite, taxRate: TaxRate): Observable<TaxRate> {

      if (taxRate) {

        const controller = "/TaxRates/"

        const endPoint = `PostTaxRate`

        const parameters = ''

        const url = `${site.url}${controller}${endPoint}${parameters}`

        return  this.http.post<TaxRate>(url, taxRate)

      }
    }

    deleteTax(site: ISite, id: any): Observable<TaxRate> {

      if (id) {

        const controller = '/TaxRates/'

        const endPoint = `deleteTaxRate`

        const parameters = `?id=${id}` // "menuItems?pageNumber=" + this.pageNumber  + "&pageSize=" +  this.pageSize

        const url = `${site.url}${controller}${endPoint}${parameters}`

        return  this.http.delete<TaxRate>(url)

      }

  };

}
