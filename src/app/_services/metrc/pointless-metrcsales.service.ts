import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { ISite } from 'src/app/_interfaces';
import { IPagedList } from '../system/paging.service';

export interface PointlessMetrcSearchModel {
  name : string
  pageSize : number
  pageNumber : number
  pageCount : number
  recordCount : number
  currentPage : number
  lastPage : number
  isLastPage : boolean;
  isFirstPage : boolean;
  loadChildren : boolean;
  startDate : string
  endDate : string
  zRUN : string
  clientAccount : string
  orderID : number
  employeeID: number;
  history: string;
  currentDay: boolean;
}
// Generated by https://quicktype.io
export interface PointlessMetrcSales {
  completeDate:        string;
  clientType:          string;
  barcodeID:           null;
  quantityTotal:       null;
  unitType:            null;
  netTotal:            number;
  oomp:                null;
  oompb:               string;
  pOdetailID:          number;
  completionShortDate: string;
  completeDateTime:    string;
  clientAccount:       null;
  orderID:             number;
  grossTotal:          number;
  unitPrice         : number
  zrun:                string;
  completionDate    : string;
  history           : number;
  exceptionNote     : string;
}

export interface METRCSalesReportPaged {
  results : PointlessMetrcSales[]
  paging  : IPagedList
  exceptions : PointlessMetrcSales[]
  exceptionMessage: string;
  netTotal: number;
}

@Injectable({
  providedIn: 'root'
})
export class PointlessMETRCSalesService {

  private _searchModel       = new BehaviorSubject<PointlessMetrcSearchModel>(null);
  public searchModel$   = this._searchModel.asObservable();

  constructor(private http: HttpClient) { }

  updateSearchModel(searchModel: PointlessMetrcSearchModel) {
    this._searchModel.next(searchModel);
  }

  assignSerialNumbersWhereSerialISNull(site: ISite): Observable<any> {
    const controller = '/METRCSalesReport/'

    const endPoint = 'AssignSerialNumbersWhereSerialISNull'

    const parameters = ''

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return this.http.get<any>(url);
  }

  getSalesReport(site: ISite, searchModel:PointlessMetrcSearchModel): Observable<METRCSalesReportPaged> {

    const controller = '/METRCSalesReport/'

    const endPoint = 'getSalesReport'

    const parameters = ''

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return this.http.post<METRCSalesReportPaged>(url, searchModel);

  }

  getSalesSummary(site: ISite, searchModel:PointlessMetrcSearchModel): Observable<METRCSalesReportPaged> {

    const controller = '/METRCSalesReport/'

    const endPoint = 'getSalesSummary'

    const parameters = ''

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return this.http.post<METRCSalesReportPaged>(url, searchModel);

  }


  getUnclosedSalesReport(site: ISite, searchModel:PointlessMetrcSearchModel): Observable<METRCSalesReportPaged> {

    const controller = '/METRCSalesReport/'

    const endPoint = 'getUnclosedSalesReport'

    const parameters = ''

    const url = `${site.url}${controller}${endPoint}${parameters}`

    return this.http.post<METRCSalesReportPaged>(url, searchModel);

  }
}
