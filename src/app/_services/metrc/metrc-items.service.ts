import { Injectable } from '@angular/core';
import { Observable, } from 'rxjs';
import { IMETRCSales } from 'src/app/_interfaces/transactions/metrc-sales';
import { HttpClient } from '@angular/common/http';
import { AuthenticationService } from '../../_services/system/authentication.service';
import { ISite } from 'src/app/_interfaces';
import { SitesService } from '../../_services/reporting/sites.service';

// Generated by https://quicktype.io


import {
  METRCItems,
  METRCItemsCategories,
  MetrcItemsBrands,
  METRCItemsCreate,
  METRCItemsUpdate
} from '../../_interfaces/metrcs/items';

@Injectable({
  providedIn: 'root'
})
export class MetrcItemsService {

  constructor( private http: HttpClient,
              private auth: AuthenticationService,
   ) {}

  getItem(id:number, site: ISite): Observable<METRCItems[]> {

    const controller = '/items/v1/'

    const endPoint = `${id}`

    const parameters = ''

    const licenseNumber  = `?licenseNumber=${site.metrcLicenseNumber}`

    const url = `${site.metrcURL}${controller}${endPoint}${parameters}${licenseNumber}`

    return this.http.get<METRCItems[]>(url);

  }

  getItemsActive(site: ISite): Observable<METRCItems[]> {

    const controller = '/items/v1/active'

    const endPoint = ``

    const parameters = ''

    const licenseNumber  = `?licenseNumber=${site.metrcLicenseNumber}`

    const url = `${site.metrcURL}${controller}${endPoint}${parameters}${licenseNumber}`

    return this.http.get<METRCItems[]>(url);

  }

  getItemsCategories(site: ISite): Observable<METRCItemsCategories[]> {

    const controller = '/items/v1/categories'

    const endPoint = ``

    const parameters = ''

    const licenseNumber  = `?licenseNumber=${site.metrcLicenseNumber}`

    const url = `${site.metrcURL}${controller}${endPoint}${parameters}${licenseNumber}`

    return this.http.get<METRCItemsCategories[]>(url);

  }

  getItemsBrands(site: ISite): Observable<MetrcItemsBrands[]> {

    const controller = '/items/v1/brands'

    const endPoint = ``

    const parameters = ''

    const licenseNumber  = `?licenseNumber=${site.metrcLicenseNumber}`

    const url = `${site.metrcURL}${controller}${endPoint}${parameters}${licenseNumber}`

    return this.http.get<MetrcItemsBrands[]>(url);

  }

  postItemsCreate(mETRCItemsCreate: METRCItemsCreate[],site: ISite): Observable<any> {

    const controller = '/items/v1/create'

    const endPoint = ``

    const parameters = ''

    const licenseNumber  = `?licenseNumber=${site.metrcLicenseNumber}`

    const url = `${site.metrcURL}${controller}${endPoint}${parameters}${licenseNumber}`

    return this.http.post<METRCItemsCreate[]>(url,mETRCItemsCreate);

  }

  postItemsUpdate(mETRCItemsUpdate: METRCItemsUpdate[],site: ISite): Observable<any> {

    const controller = '/items/v1/update'

    const endPoint = ``

    const parameters = ''

    const licenseNumber  = `?licenseNumber=${site.metrcLicenseNumber}`

    const url = `${site.metrcURL}${controller}${endPoint}${parameters}${licenseNumber}`

    return this.http.post<METRCItemsUpdate[]>(url, mETRCItemsUpdate);

  }

  deleteItems(id: number,site: ISite): Observable<any> {

    const controller = '/items/v1/delete'

    const endPoint = `${id}`

    const parameters = ''

    const licenseNumber  = `?licenseNumber=${site.metrcLicenseNumber}`

    const url = `${site.metrcURL}${controller}${endPoint}${parameters}${licenseNumber}`

    return this.http.delete(url);

  }
}
