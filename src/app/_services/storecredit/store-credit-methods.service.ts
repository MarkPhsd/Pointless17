import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { MatSnackBar } from '@angular/material/snack-bar';
import { BehaviorSubject, Observable, switchMap } from 'rxjs';
import { StoreCreditEditorComponent } from 'src/app/modules/admin/store-credit/store-credit-editor/store-credit-editor.component';
import { StoreCreditPopUpComponent } from 'src/app/modules/posorders/pos-payment/store-credit-pop-up/store-credit-pop-up.component';
import { IPOSOrder, IPurchaseOrderItem, ISite } from 'src/app/_interfaces';
import { AuthenticationService } from '..';
import { SitesService } from '../reporting/sites.service';
import { IPagedList } from '../system/paging.service';
import { POSOrderItemServiceService } from '../transactions/posorder-item-service.service';
import { StoreCreditService } from './store-credit.service';

  export interface  StoreCreditResultsPaged {
    results: StoreCredit[];
    paging: IPagedList;
    errorMessage: string;
  }

  // Generated by https://quicktype.io
  export interface StoreCredit {
    id:             number;
    number:         string;
    clientID:       number;
    value:          number;
    purchaseDate:   string;
    cardData:       string;
    track1:         string;
    track2:         string;
    cardNum:        string;
    orderID:        number;
    type:           number;
    identifier:     string;
    keyData:        string;
    trackData:      string;
    siteID:         number;
    rawTrackData:   string;
    rawKeyData:     string;
    userName:       string;
    beginDate:      string;
    endDate:        string;
    userNameSecret: string;
    accountNumber:  string;
  }


  export interface IStoreCreditSearchModel {
    cardNumber: string;
    id : string;
    userNameSecret : String//not used
    clientID:       number;
    maxValue : string;//not used
    minValue : string;//not used
    userName: string;//not used
    pageSize : number;
    pageNumber : number;
    pageCount : number;
    recordCount: number;
    currentPage : number;
    lastPage: number;
    isLastPage : boolean;
    isFirstPage : boolean;
  }

@Injectable({
  providedIn: 'root'
})
export class StoreCreditMethodsService {

  private _searchModel     = new BehaviorSubject<IStoreCreditSearchModel>(null);
  public searchModel$      = this._searchModel.asObservable();

  private _storeCredit     = new BehaviorSubject<StoreCredit>(null);
  public storeCredit$      = this._storeCredit.asObservable();

  constructor(
    private httpClient         : HttpClient,
    private fb                 : FormBuilder,
    private _snackBar          : MatSnackBar,
    private dialog             : MatDialog,
    private sitesService: SitesService,
    private poOrderItemService: POSOrderItemServiceService,
    private storeCreditService: StoreCreditService,
    private auth: AuthenticationService,) {
}

updateStoreCredit(item: StoreCredit){
  this._storeCredit.next(item)
}

updateSearchModel(item: IStoreCreditSearchModel){
  this._searchModel.next(item)
}

getStoreCreditForm(inputForm:FormGroup): FormGroup {
    inputForm =   this.fb.group({
    id:             [''],
    number:         [''],
    clientID:       [''],
    value:          [''],
    purchaseDate:   [''],
    cardData:       [''],
    track1:         [''],
    track2:         [''],
    cardNum:        [''],
    orderID:        [''],
    type:           [''],
    identifier:     [''],
    keyData:        [''],
    trackData:      [''],
    siteID:         [''],
    rawTrackData:   [''],
    rawKeyData:     [''],
    userName:       [''],
    beginDate:      [''],
    endDate:        [''],
    userNameSecret: [''],
    accountNumber : [''],
  })
  return inputForm;
}

  openStoreCreditEditor(id: any) {
    let dialogRef: any;

    dialogRef = this.dialog.open(StoreCreditEditorComponent,
      { width:        '655px',
        minWidth:     '655px',
        height:       '550px',
        minHeight:    '550px',
        data : id
      },
    )
    return dialogRef
  }

  openStoreCreditPopUp(id: any, clientID : number) {
    let dialogRef: any;

    const item = {clientID: clientID}
    dialogRef = this.dialog.open(StoreCreditPopUpComponent,
      { width:        '100vw',
        minWidth:     '100vw',
        height:       '100vh',
        minHeight:    '100vh',
        data     :    item,
      },
    )
    return dialogRef
  }

  issueToStoreCredit(order: IPOSOrder, credit: StoreCredit, POSItemID: number):  Observable<IPurchaseOrderItem> {
    //get order total
    //check balance of storeCredit
    const site = this.sitesService.getAssignedSite();

    if (!order) {
      this.notifyEvent('Order not initiated', 'Alert')
      return
    }

    if (order && credit) {
      //get payment method of the store credit if
      // payment: IPOSPayment, order: IPOSOrder, amount: number, paymentMethod: IPaymentMethod
      const storeCredit$ = this.storeCreditService.save(site,credit)

      let posItem = {} as IPurchaseOrderItem
      posItem.id = POSItemID;
      posItem.modifierNote = "Store credit issued."

     return storeCredit$.pipe(
          switchMap( data => {
            posItem.gcid = data.id.toString();
            return this.poOrderItemService.setItemStoreCreditInfo(site, posItem);
          })
        )
      }

      return null;

    }

    notifyWithOption(message: string, title: string, notifyEnabled: boolean) {
      if (notifyEnabled) {
        this.notifyEvent(message, title)
      }
    }

    notifyEvent(message: string, action: string) {
      this._snackBar.open(message, action, {
        duration: 2000,
        verticalPosition: 'bottom'
      });
    }
}
