{"version":3,"mappings":"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","names":["t","h","l","i","e","d","_","r","a","el","gestureName","threshold","onStart","f","onMove","onEnd","attachComponent","delegate","container","component","cssClasses","componentProps","attachViewToDom","HTMLElement","Error","ownerDocument","createElement","forEach","c","classList","add","Object","assign","appendChild","Promise","resolve","componentOnReady","detachComponent","element","parentElement","removeViewFromDom","remove","getEngine","available","isCordova","window","isCapacitor","Capacitor","impact","style","notification","selection","this","selectionStart","selectionChanged","selectionEnd","o","s","constructor","n","y","E","C","p","bubbles","dur","circles","fn","top","left","circular","elmDuration","cx","cy","fill","viewBox","transform","crescent","dots","lines","y1","y2","hostContext","selector","closest","createColorClasses","color","cssClassMap","length","getClassMap","classes","map","getClassList","undefined","Array","isArray","split","filter","trim","SCHEME","openURL","url","ev","direction","animation","test","router","document","querySelector","preventDefault","push"],"sources":["./node_modules/@ionic/core/dist/esm/button-active-d4bd4f74.js","./node_modules/@ionic/core/dist/esm/framework-delegate-4392cd63.js","./node_modules/@ionic/core/dist/esm/haptic-27b3f981.js","./node_modules/@ionic/core/dist/esm/index-9e3fe806.js","./node_modules/@ionic/core/dist/esm/spinner-configs-cd7845af.js","./node_modules/@ionic/core/dist/esm/theme-ff3fc52f.js"],"sourcesContent":["import { c as writeTask } from './index-7a8b7a1c.js';\nimport { h as hapticSelectionEnd, a as hapticSelectionStart, b as hapticSelectionChanged } from './haptic-27b3f981.js';\nimport { createGesture } from './index-34cb2743.js';\n\nconst createButtonActiveGesture = (el, isButton) => {\n  let currentTouchedButton;\n  let initialTouchedButton;\n  const activateButtonAtPoint = (x, y, hapticFeedbackFn) => {\n    if (typeof document === 'undefined') {\n      return;\n    }\n    const target = document.elementFromPoint(x, y);\n    if (!target || !isButton(target)) {\n      clearActiveButton();\n      return;\n    }\n    if (target !== currentTouchedButton) {\n      clearActiveButton();\n      setActiveButton(target, hapticFeedbackFn);\n    }\n  };\n  const setActiveButton = (button, hapticFeedbackFn) => {\n    currentTouchedButton = button;\n    if (!initialTouchedButton) {\n      initialTouchedButton = currentTouchedButton;\n    }\n    const buttonToModify = currentTouchedButton;\n    writeTask(() => buttonToModify.classList.add('ion-activated'));\n    hapticFeedbackFn();\n  };\n  const clearActiveButton = (dispatchClick = false) => {\n    if (!currentTouchedButton) {\n      return;\n    }\n    const buttonToModify = currentTouchedButton;\n    writeTask(() => buttonToModify.classList.remove('ion-activated'));\n    /**\n     * Clicking on one button, but releasing on another button\n     * does not dispatch a click event in browsers, so we\n     * need to do it manually here. Some browsers will\n     * dispatch a click if clicking on one button, dragging over\n     * another button, and releasing on the original button. In that\n     * case, we need to make sure we do not cause a double click there.\n     */\n    if (dispatchClick && initialTouchedButton !== currentTouchedButton) {\n      currentTouchedButton.click();\n    }\n    currentTouchedButton = undefined;\n  };\n  return createGesture({\n    el,\n    gestureName: 'buttonActiveDrag',\n    threshold: 0,\n    onStart: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionStart),\n    onMove: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionChanged),\n    onEnd: () => {\n      clearActiveButton(true);\n      hapticSelectionEnd();\n      initialTouchedButton = undefined;\n    }\n  });\n};\n\nexport { createButtonActiveGesture as c };\n","import { c as componentOnReady } from './helpers-dd7e4b7b.js';\n\nconst attachComponent = async (delegate, container, component, cssClasses, componentProps) => {\n  if (delegate) {\n    return delegate.attachViewToDom(container, component, componentProps, cssClasses);\n  }\n  if (typeof component !== 'string' && !(component instanceof HTMLElement)) {\n    throw new Error('framework delegate is missing');\n  }\n  const el = (typeof component === 'string')\n    ? container.ownerDocument && container.ownerDocument.createElement(component)\n    : component;\n  if (cssClasses) {\n    cssClasses.forEach(c => el.classList.add(c));\n  }\n  if (componentProps) {\n    Object.assign(el, componentProps);\n  }\n  container.appendChild(el);\n  await new Promise(resolve => componentOnReady(el, resolve));\n  return el;\n};\nconst detachComponent = (delegate, element) => {\n  if (element) {\n    if (delegate) {\n      const container = element.parentElement;\n      return delegate.removeViewFromDom(container, element);\n    }\n    element.remove();\n  }\n  return Promise.resolve();\n};\n\nexport { attachComponent as a, detachComponent as d };\n","const HapticEngine = {\n  getEngine() {\n    const win = window;\n    return (win.TapticEngine) || (win.Capacitor && win.Capacitor.isPluginAvailable('Haptics') && win.Capacitor.Plugins.Haptics);\n  },\n  available() {\n    return !!this.getEngine();\n  },\n  isCordova() {\n    return !!window.TapticEngine;\n  },\n  isCapacitor() {\n    const win = window;\n    return !!win.Capacitor;\n  },\n  impact(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.impact({ style });\n  },\n  notification(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.notification({ style });\n  },\n  selection() {\n    this.impact({ style: 'light' });\n  },\n  selectionStart() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionStart();\n    }\n    else {\n      engine.gestureSelectionStart();\n    }\n  },\n  selectionChanged() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionChanged();\n    }\n    else {\n      engine.gestureSelectionChanged();\n    }\n  },\n  selectionEnd() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionEnd();\n    }\n    else {\n      engine.gestureSelectionEnd();\n    }\n  }\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nconst hapticSelection = () => {\n  HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nconst hapticSelectionStart = () => {\n  HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nconst hapticSelectionChanged = () => {\n  HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nconst hapticSelectionEnd = () => {\n  HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\nconst hapticImpact = (options) => {\n  HapticEngine.impact(options);\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };\n","/**\n * Does a simple sanitization of all elements\n * in an untrusted string\n */\nconst sanitizeDOMString = (untrustedString) => {\n  try {\n    if (untrustedString instanceof IonicSafeString) {\n      return untrustedString.value;\n    }\n    if (!isSanitizerEnabled() || typeof untrustedString !== 'string' || untrustedString === '') {\n      return untrustedString;\n    }\n    /**\n     * Create a document fragment\n     * separate from the main DOM,\n     * create a div to do our work in\n     */\n    const documentFragment = document.createDocumentFragment();\n    const workingDiv = document.createElement('div');\n    documentFragment.appendChild(workingDiv);\n    workingDiv.innerHTML = untrustedString;\n    /**\n     * Remove any elements\n     * that are blocked\n     */\n    blockedTags.forEach(blockedTag => {\n      const getElementsToRemove = documentFragment.querySelectorAll(blockedTag);\n      for (let elementIndex = getElementsToRemove.length - 1; elementIndex >= 0; elementIndex--) {\n        const element = getElementsToRemove[elementIndex];\n        if (element.parentNode) {\n          element.parentNode.removeChild(element);\n        }\n        else {\n          documentFragment.removeChild(element);\n        }\n        /**\n         * We still need to sanitize\n         * the children of this element\n         * as they are left behind\n         */\n        const childElements = getElementChildren(element);\n        /* tslint:disable-next-line */\n        for (let childIndex = 0; childIndex < childElements.length; childIndex++) {\n          sanitizeElement(childElements[childIndex]);\n        }\n      }\n    });\n    /**\n     * Go through remaining elements and remove\n     * non-allowed attribs\n     */\n    // IE does not support .children on document fragments, only .childNodes\n    const dfChildren = getElementChildren(documentFragment);\n    /* tslint:disable-next-line */\n    for (let childIndex = 0; childIndex < dfChildren.length; childIndex++) {\n      sanitizeElement(dfChildren[childIndex]);\n    }\n    // Append document fragment to div\n    const fragmentDiv = document.createElement('div');\n    fragmentDiv.appendChild(documentFragment);\n    // First child is always the div we did our work in\n    const getInnerDiv = fragmentDiv.querySelector('div');\n    return (getInnerDiv !== null) ? getInnerDiv.innerHTML : fragmentDiv.innerHTML;\n  }\n  catch (err) {\n    console.error(err);\n    return '';\n  }\n};\n/**\n * Clean up current element based on allowed attributes\n * and then recursively dig down into any child elements to\n * clean those up as well\n */\nconst sanitizeElement = (element) => {\n  // IE uses childNodes, so ignore nodes that are not elements\n  if (element.nodeType && element.nodeType !== 1) {\n    return;\n  }\n  for (let i = element.attributes.length - 1; i >= 0; i--) {\n    const attribute = element.attributes.item(i);\n    const attributeName = attribute.name;\n    // remove non-allowed attribs\n    if (!allowedAttributes.includes(attributeName.toLowerCase())) {\n      element.removeAttribute(attributeName);\n      continue;\n    }\n    // clean up any allowed attribs\n    // that attempt to do any JS funny-business\n    const attributeValue = attribute.value;\n    /* tslint:disable-next-line */\n    if (attributeValue != null && attributeValue.toLowerCase().includes('javascript:')) {\n      element.removeAttribute(attributeName);\n    }\n  }\n  /**\n   * Sanitize any nested children\n   */\n  const childElements = getElementChildren(element);\n  /* tslint:disable-next-line */\n  for (let i = 0; i < childElements.length; i++) {\n    sanitizeElement(childElements[i]);\n  }\n};\n/**\n * IE doesn't always support .children\n * so we revert to .childNodes instead\n */\nconst getElementChildren = (el) => {\n  return (el.children != null) ? el.children : el.childNodes;\n};\nconst isSanitizerEnabled = () => {\n  const win = window;\n  const config = win && win.Ionic && win.Ionic.config;\n  if (config) {\n    if (config.get) {\n      return config.get('sanitizerEnabled', true);\n    }\n    else {\n      return config.sanitizerEnabled === true || config.sanitizerEnabled === undefined;\n    }\n  }\n  return true;\n};\nconst allowedAttributes = ['class', 'id', 'href', 'src', 'name', 'slot'];\nconst blockedTags = ['script', 'style', 'iframe', 'meta', 'link', 'object', 'embed'];\nclass IonicSafeString {\n  constructor(value) {\n    this.value = value;\n  }\n}\n\nexport { IonicSafeString as I, sanitizeDOMString as s };\n","const spinners = {\n  'bubbles': {\n    dur: 1000,\n    circles: 9,\n    fn: (dur, index, total) => {\n      const animationDelay = `${(dur * index / total) - dur}ms`;\n      const angle = 2 * Math.PI * index / total;\n      return {\n        r: 5,\n        style: {\n          'top': `${9 * Math.sin(angle)}px`,\n          'left': `${9 * Math.cos(angle)}px`,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  },\n  'circles': {\n    dur: 1000,\n    circles: 8,\n    fn: (dur, index, total) => {\n      const step = index / total;\n      const animationDelay = `${(dur * step) - dur}ms`;\n      const angle = 2 * Math.PI * step;\n      return {\n        r: 5,\n        style: {\n          'top': `${9 * Math.sin(angle)}px`,\n          'left': `${9 * Math.cos(angle)}px`,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  },\n  'circular': {\n    dur: 1400,\n    elmDuration: true,\n    circles: 1,\n    fn: () => {\n      return {\n        r: 20,\n        cx: 48,\n        cy: 48,\n        fill: 'none',\n        viewBox: '24 24 48 48',\n        transform: 'translate(0,0)',\n        style: {}\n      };\n    }\n  },\n  'crescent': {\n    dur: 750,\n    circles: 1,\n    fn: () => {\n      return {\n        r: 26,\n        style: {}\n      };\n    }\n  },\n  'dots': {\n    dur: 750,\n    circles: 3,\n    fn: (_, index) => {\n      const animationDelay = -(110 * index) + 'ms';\n      return {\n        r: 6,\n        style: {\n          'left': `${9 - (9 * index)}px`,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  },\n  'lines': {\n    dur: 1000,\n    lines: 12,\n    fn: (dur, index, total) => {\n      const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n      const animationDelay = `${(dur * index / total) - dur}ms`;\n      return {\n        y1: 17,\n        y2: 29,\n        style: {\n          'transform': transform,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  },\n  'lines-small': {\n    dur: 1000,\n    lines: 12,\n    fn: (dur, index, total) => {\n      const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n      const animationDelay = `${(dur * index / total) - dur}ms`;\n      return {\n        y1: 12,\n        y2: 20,\n        style: {\n          'transform': transform,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  }\n};\nconst SPINNERS = spinners;\n\nexport { SPINNERS as S };\n","const hostContext = (selector, el) => {\n  return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n  return (typeof color === 'string' && color.length > 0) ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n  if (classes !== undefined) {\n    const array = Array.isArray(classes) ? classes : classes.split(' ');\n    return array\n      .filter(c => c != null)\n      .map(c => c.trim())\n      .filter(c => c !== '');\n  }\n  return [];\n};\nconst getClassMap = (classes) => {\n  const map = {};\n  getClassList(classes).forEach(c => map[c] = true);\n  return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n  if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n    const router = document.querySelector('ion-router');\n    if (router) {\n      if (ev != null) {\n        ev.preventDefault();\n      }\n      return router.push(url, direction, animation);\n    }\n  }\n  return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n"],"sourceRoot":"webpack:///","file":"common.d9d85335d31b407d42f3.js"}